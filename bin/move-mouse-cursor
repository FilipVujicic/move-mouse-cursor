#!/bin/bash

FILE_PATH="/tmp/move-mouse-cursor"

#Default options
WRAPAROUND=true


#Parses options
OPTS=`getopt -olrRwW --long left,right,reset,wraparound,no-wrap -- "$@"`
eval set -- "$OPTS"

while true; do
  case "$1" in
    -l | --left ) DIRECTION=left; shift ;;
    -r | --right ) DIRECTION=right; shift ;;
    -R | --reset ) RESET_FILE=true; shift ;;
    -w | --wraparound ) WRAPAROUND=true; shift ;;
    -W | --no-wrap ) WRAPAROUND=false; shift ;;
    -- ) shift; break ;;
    * ) break;;
  esac
done



# TODO:
#
# Maybe change names of:
#  createFile
#
# Fix comments:
#  line 67 (# Works out which screen the cursor is on by checking if it is to the right of the left edge for every screen)
#


function createFile {

# Gets information about the resolution and positions of the screens from xrandr
rawScreenList=`xrandr --listmonitors`
numberOfScreens=`echo "$rawScreenList" | awk 'NR==1{print $2}'`


# These  commands format rawScreenList into a usable format
#   First  takes the third column of rawScreenList, which has the screen resolutions and positions (also removes the first line)
#   Second removes everything except the hight, width, position along the X axis, and position on the y axis of the screens
#   Third  rearanges the columns so that positon on X axis is the first column and y axis is the second column (This is so the screens can be sorted by x axis)
#   Fourth sorts the rows by X axis ascending
# Result is in the form of xPosition, yPosition, Length, Hight for every screen
formattedScreenList=`echo "$rawScreenList" \
| awk 'NR>1{print $3}' \
| sed -e 's_\/[0-9]*x_ _' -e 's_\/[0-9]*+_ _' -e 's_+_ _' \
| awk '{print $3,$4,$1,$2}' \
| sort -n`


# Creates an array for each measurement with the index value corresponding to the screen
# Arrays are named xPos, yPos, width, hight
eval $(echo "$formattedScreenList" \
| awk '{print "xPos[" NR-1 "]=" $1 " ; yPos[" NR-1 "]=" $2 " ; width[" NR-1 "]=" $3 " ; hight[" NR-1 "]=" $4 }')


# Creates two arrays for each coordinate to the center of each screen, with the index value corresponding to the screen
for ((i=0; i<=$numberOfScreens-1; i++))
do
  xCenter[$i]=$((width[i]/2 + xPos[i]))
  yCenter[$i]=$((hight[i]/2 + yPos[i]))
done


# Creates the file with the info/variables about the screens needed for the script to run
echo "numberOfScreens="$numberOfScreens"; xPos=("${xPos[*]}"); xCenter=("${xCenter[*]}"); yCenter=("${yCenter[*]}")" > $FILE_PATH

}




eval $(xdotool getmouselocation --shell)

# If file does not exist, create the file (Running the script with no parameters also resets the file)
if [ ! -f $FILE_PATH ] || [ "$RESET_FILE" == true ]; then
  echo creating file
  createFile
else
  eval $(cat $FILE_PATH)
fi


# Works out which screen the cursor is on by checking if it is to the right of the left edge for every screen
for ((i=$numberOfScreens-1; i>=0; i--)); do
  if [ "$X" -gt "${xPos[i]}" ]; then
    currentScreen=$i
    break
  fi
done

# Finds destination screen (screen immediately to the left/right depending on parameter)
if [ "$DIRECTION" == "left" ]; then
  destinationScreen=$((currentScreen - 1))
  if [ "$destinationScreen" -lt 0 ]  # If the cursor is already on the leftmost screen, destination screen will be leftmost screen (or rightmost if wraparound is enabled)
  then
    if [ "$WRAPAROUND" == true ] ; then
      destinationScreen=$((numberOfScreens-1))
    else
      destinationScreen=0
    fi
fi

# Same as left, but mirrored
elif [ "$DIRECTION" == "right" ]; then
  destinationScreen=$((currentScreen + 1))
  if [ "$destinationScreen" -gt "$((numberOfScreens-1))" ]
  then
    if [ "$WRAPAROUND" == true ] ; then
      destinationScreen=0
    else
      destinationScreen=$((numberOfScreens-1))
    fi
fi

else
  echo left/right was not specified
  dontMoveCursor=true
fi

# Moves the mouse to the center of the destination screen
if [ ! "$dontMoveCursor" ]; then
  xdotool mousemove ${xCenter[destinationScreen]} ${yCenter[destinationScreen]}
fi
